12/31/23
I'm only starting this devlog a couple of days into working on the first prototype of the ideas that I have for my game project, so here is a recap of the work I have done so far: 
    Read through good chunks of Godot's online documentation and some of the engine's weaknesses (None of which seemed to be too relevant to me - although I don't remember them)
    Worked through some of the "Your first 2D game" pages on the documentation, quickly getting sidetracked with my own movement logic and effects
    Started a 2D platforming game just to work out the built-in physics, collision and animation systems, and getting a glimpse of how TileMaps work.
    Started a prototype for what I want the actual dissertation project to look/work like, and so far I have made:
        Borrowed assets on a tilemap making up a level node
        A character controller node using the engine's built in CharacterBody Node, enabling easy movement and collision with the level as well as simple animation
        A fireball node that I can add to the Main node, handling its own collision, destruction and animations 
        A chest node which detects a player nearby and opens itself, and then despawns itself
        Lights attached to players, fireballs and chests with the occlusion layers to match on the TileMap, to create simple shadows across the level
        I've also toyed with various shader effects, creating a vignette for the whole canvas to make the level look less flat, as well as rasterization with dithering to make the game more visually interesting as well as to make the mismatched assets that I will be using less apparent: more limited colour palletes will help a lot, I imagine. I also have a shader created for the chest to flash when it's about to despawn, and I imagine it's a nice base to work off of for other things
    I've learned a lot about the structure of Godot's objects and various menus but it's going to be a while before I know about all the tools at my disposal and how they are best applied. I am very glad that the systems seem to be very compatible with ripping stuff out and restructuring things, because I still have no idea how to lay out the nodes in this game.

I was planning on making a devlog when I started development, just to ramble about things that I know I will forget regarding my writeup or ideas for the game. It'll be nice to get a Trello board once the project is fully in motion, but for now I just wanted to note a few things:
    The first big feature that I'm going to want to prototype is a bunch of nicely encapsulated spellcasting nodes, and then I'll be wanting to find out how to give them to the player in a gameplay sense - I think limited use cards would be fun and unique, but I have yet to see how fun it is. There are already a lot of good ideas about this on Google Docs, but that document is probably going to be made obsolete by this one.
    I'm probably not going to be working on procedural generation until the gameplay loop is solid, but I do need ideas about how to transition from area to area. I want the game to have a room structure, and I think it would be fun to have rooms larger than a single screen. For transitioning between them, I could use simple "teleport" doors for simplicity, but a real level structure would be more fun... and harder to implement with procedural generation. While fiddling with shaders I stumbled on a very interesting way to do screen transitions, which is to turn the quantization levels way down to 0 on my shader, change the screen, and then turn the quantization back up. I'm not sure if I want to keep the graphics the same as they are right now, with the low bit depth, but it could be an easy way to add some style to the game. I'm looking forward to toying with lighting and shaders a lot more, but the built-in lighting system doesn't look to enable a lot of variety, so I might have a lot of learning ahead of me for that one. The built-in stuff is pretty good by itself though!

1/23/24

I met with my supervisor yesterday, and we discussed due dates, deadlines, the self-imposed MVP deadline, referencing and where marks would come from in my dissertation. The outcome of the meeting was, expectedly, that I need to get to grips with Godot a little bit more, as well as create a detailed specification for my MVP as well as creating a timeline for when I would like to complete tasks by. 

In the last week or two, I have toyed around with restructuring my project to enable flexibility in development and prototyping, but I am not satisfied with what I've made so far.
The basis for this work has been Godot's Resources, as suggested by members of the Godot discord. I tried to make a Projectile and Weapon resource file, derive different types of weapons and projectiles from those resources and use the resources to instantiate weapon and projectile scenes into the game. 
This method falls short for modularity and fast prototyping because adding new attributes to resources is quite an involved process, and it is difficult to attach different behaviours to resources since they all need to be compatible with the same Projectile class. Having a different scene for each object seems to require less work and not much more repetition, since I don't plan on having that many different types of weapons or projectiles to begin with anyways. Fail fast!

I've done a little bit more work in understanding what a Godot class even is, so going forward I will try to use nodes, scripts and class extensions, since it is what I am familliar with and what seems most sensible right now. I'm sure I will find better methods later down the line, and that I will find a use for the resource system.